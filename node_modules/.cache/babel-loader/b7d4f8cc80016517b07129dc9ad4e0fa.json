{"ast":null,"code":"var _jsxFileName = \"G:\\\\react-upload-download-files-master\\\\src\\\\components\\\\App.js\";\nimport React, { useState, useRef } from 'react';\nimport Dropzone from 'react-dropzone';\nimport axios from 'axios';\nimport { Form, Row, Col, Button } from 'react-bootstrap';\nimport { API_URL } from '../utils/constants';\n\nconst App = props => {\n  const [file, setFile] = useState(null); // state for storing actual image\n\n  const [previewSrc, setPreviewSrc] = useState(''); // state for storing previewImage\n\n  const [state, setState] = useState({\n    title: '',\n    description: ''\n  });\n  const [errorMsg, setErrorMsg] = useState('');\n  const [isPreviewAvailable, setIsPreviewAvailable] = useState(false); // state to show preview only for images\n\n  const dropRef = useRef(); // React ref for managing the hover state of droppable area\n\n  const handleInputChange = event => {\n    setState({ ...state,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  const onDrop = files => {\n    const [uploadedFile] = files;\n    setFile(uploadedFile);\n    const fileReader = new FileReader();\n\n    fileReader.onload = () => {\n      setPreviewSrc(fileReader.result);\n    };\n\n    fileReader.readAsDataURL(uploadedFile);\n    setIsPreviewAvailable(uploadedFile.name.match(/\\.(jpeg|jpg|png)$/));\n    dropRef.current.style.border = '2px dashed #e9ebeb';\n  };\n\n  const updateBorder = dragState => {\n    if (dragState === 'over') {\n      dropRef.current.style.border = '2px solid #333';\n    } else if (dragState === 'leave') {\n      dropRef.current.style.border = '2px dashed #e9ebeb';\n    }\n  };\n\n  const handleOnSubmit = async event => {\n    event.preventDefault();\n\n    try {\n      const {\n        title,\n        description\n      } = state;\n\n      if (title.trim() !== '' && description.trim() !== '') {\n        if (file) {\n          const formData = new FormData();\n          formData.append('file', file);\n          formData.append('title', title);\n          formData.append('description', description);\n          setErrorMsg('');\n          await axios.post(`${API_URL}/upload`, formData, {\n            headers: {\n              'Content-Type': 'multipart/form-data'\n            }\n          });\n          props.history.push('/list');\n        } else {\n          setErrorMsg('Please select a file to add.');\n        }\n      } else {\n        setErrorMsg('Please enter all the field values.');\n      }\n    } catch (error) {\n      error.response && setErrorMsg(error.response.data);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    className: \"search-form\",\n    onSubmit: handleOnSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, errorMsg && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"errorMsg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 22\n    }\n  }, errorMsg), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"text\",\n    name: \"title\",\n    value: state.title || '',\n    placeholder: \"Enter title\",\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 15\n    }\n  })))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"text\",\n    name: \"description\",\n    value: state.description || '',\n    placeholder: \"Enter description\",\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 15\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"upload-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Dropzone, {\n    onDrop: onDrop,\n    onDragEnter: () => updateBorder('over'),\n    onDragLeave: () => updateBorder('leave'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, ({\n    getRootProps,\n    getInputProps\n  }) => /*#__PURE__*/React.createElement(\"div\", Object.assign({}, getRootProps({\n    className: 'drop-zone'\n  }), {\n    ref: dropRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, getInputProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }\n  }, \"Drag and drop a file OR click here to select a file\"), file && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 21\n    }\n  }, \"Selected file:\"), \" \", file.name))), previewSrc ? isPreviewAvailable ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"image-preview\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"preview-image\",\n    src: previewSrc,\n    alt: \"Preview\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"preview-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }\n  }, \"No preview available for this file\")) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"preview-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 15\n    }\n  }, \"Image preview will be shown here after selection\"))), /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }, \"Submit\")));\n};\n\nexport default App;","map":{"version":3,"sources":["G:/react-upload-download-files-master/src/components/App.js"],"names":["React","useState","useRef","Dropzone","axios","Form","Row","Col","Button","API_URL","App","props","file","setFile","previewSrc","setPreviewSrc","state","setState","title","description","errorMsg","setErrorMsg","isPreviewAvailable","setIsPreviewAvailable","dropRef","handleInputChange","event","target","name","value","onDrop","files","uploadedFile","fileReader","FileReader","onload","result","readAsDataURL","match","current","style","border","updateBorder","dragState","handleOnSubmit","preventDefault","trim","formData","FormData","append","post","headers","history","push","error","response","data","getRootProps","getInputProps","className"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\nimport Dropzone from 'react-dropzone';\nimport axios from 'axios';\nimport { Form, Row, Col, Button } from 'react-bootstrap';\nimport { API_URL } from '../utils/constants';\n\nconst App = (props) => {\n  const [file, setFile] = useState(null); // state for storing actual image\n  const [previewSrc, setPreviewSrc] = useState(''); // state for storing previewImage\n  const [state, setState] = useState({\n    title: '',\n    description: ''\n  });\n  const [errorMsg, setErrorMsg] = useState('');\n  const [isPreviewAvailable, setIsPreviewAvailable] = useState(false); // state to show preview only for images\n  const dropRef = useRef(); // React ref for managing the hover state of droppable area\n\n  const handleInputChange = (event) => {\n    setState({\n      ...state,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  const onDrop = (files) => {\n    const [uploadedFile] = files;\n    setFile(uploadedFile);\n\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      setPreviewSrc(fileReader.result);\n    };\n    fileReader.readAsDataURL(uploadedFile);\n    setIsPreviewAvailable(uploadedFile.name.match(/\\.(jpeg|jpg|png)$/));\n    dropRef.current.style.border = '2px dashed #e9ebeb';\n  };\n\n  const updateBorder = (dragState) => {\n    if (dragState === 'over') {\n      dropRef.current.style.border = '2px solid #333';\n    } else if (dragState === 'leave') {\n      dropRef.current.style.border = '2px dashed #e9ebeb';\n    }\n  };\n\n  const handleOnSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const { title, description } = state;\n      if (title.trim() !== '' && description.trim() !== '') {\n        if (file) {\n          const formData = new FormData();\n          formData.append('file', file);\n          formData.append('title', title);\n          formData.append('description', description);\n\n          setErrorMsg('');\n          await axios.post(`${API_URL}/upload`, formData, {\n            headers: {\n              'Content-Type': 'multipart/form-data'\n            }\n          });\n          props.history.push('/list');\n        } else {\n          setErrorMsg('Please select a file to add.');\n        }\n      } else {\n        setErrorMsg('Please enter all the field values.');\n      }\n    } catch (error) {\n      error.response && setErrorMsg(error.response.data);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Form className=\"search-form\" onSubmit={handleOnSubmit}>\n        {errorMsg && <p className=\"errorMsg\">{errorMsg}</p>}\n        <Row>\n          <Col>\n            <Form.Group controlId=\"title\">\n              <Form.Control\n                type=\"text\"\n                name=\"title\"\n                value={state.title || ''}\n                placeholder=\"Enter title\"\n                onChange={handleInputChange}\n              />\n            </Form.Group>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Form.Group controlId=\"description\">\n              <Form.Control\n                type=\"text\"\n                name=\"description\"\n                value={state.description || ''}\n                placeholder=\"Enter description\"\n                onChange={handleInputChange}\n              />\n            </Form.Group>\n          </Col>\n        </Row>\n        <div className=\"upload-section\">\n          <Dropzone\n            onDrop={onDrop}\n            onDragEnter={() => updateBorder('over')}\n            onDragLeave={() => updateBorder('leave')}\n          >\n            {({ getRootProps, getInputProps }) => (\n              <div {...getRootProps({ className: 'drop-zone' })} ref={dropRef}>\n                <input {...getInputProps()} />\n                <p>Drag and drop a file OR click here to select a file</p>\n                {file && (\n                  <div>\n                    <strong>Selected file:</strong> {file.name}\n                  </div>\n                )}\n              </div>\n            )}\n          </Dropzone>\n          {previewSrc ? (\n            isPreviewAvailable ? (\n              <div className=\"image-preview\">\n                <img className=\"preview-image\" src={previewSrc} alt=\"Preview\" />\n              </div>\n            ) : (\n              <div className=\"preview-message\">\n                <p>No preview available for this file</p>\n              </div>\n            )\n          ) : (\n            <div className=\"preview-message\">\n              <p>Image preview will be shown here after selection</p>\n            </div>\n          )}\n        </div>\n        <Button variant=\"primary\" type=\"submit\">\n          Submit\n        </Button>\n      </Form>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}